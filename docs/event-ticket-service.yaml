openapi: 3.0.0
info:
  title: Ticket Service API
  description: API documentation for the Ticket Service, part of an event-driven architecture integrating with User Service, Notification Service, Payment Service, and Recon Service. This service handles event creation, ticket booking, and management. Authentication is required for protected endpoints (e.g., JWT bearer token). Admin privileges are enforced via roles in the token. HATEOAS principles are applied where relevant, providing links in responses for related resources.
  version: 1.0.0
servers:
  - url: https://api.ticket-service.com/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Assumes JWT with claims for user ID and roles (e.g., 'admin')
  schemas:
    ViewEventResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique event identifier
        name:
          type: string
          description: Event name
        date:
          type: string
          format: date-time
          description: Event date and time (ISO 8601)
        location:
          type: string
          description: Event location
        description:
          type: string
          description: Event details
        capacity:
          type: integer
          description: Total ticket capacity
        availableTickets:
          type: integer
          description: Remaining available tickets
        _links:
          type: object
          description: HATEOAS links
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
            tickets:
              type: object
              properties:
                href:
                  type: string
                  description: Link to list tickets for this event (admin only)
            bookTicket:
              type: object
              properties:
                href:
                  type: string
                  description: Link to book a ticket for this event
    EventInput:
      type: object
      required:
        - name
        - descriptionn
        - event_date
        - location
        - available_tickets
        - price
      properties:
        name:
          type: string
        description:
          type: string
        event_date:
          type: string
          format: date-time
        location:
          type: string
        available_tickets:
          type: integer
    Ticket:
      type: object
      properties:
        id:
          type: string
          description: Unique ticket identifier
        eventId:
          type: string
          description: Associated event ID
        userId:
          type: string
          description: User who booked the ticket
        status:
          type: string
          enum: [pending, successful, failed, cancelled]
          description: Payment and booking status
        bookingDate:
          type: string
          format: date-time
          description: Date the ticket was booked
        paymentId:
          type: string
          description: Reference to payment in Payment/Recon Service
        _links:
          type: object
          description: HATEOAS links
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
            event:
              type: object
              properties:
                href:
                  type: string
                  description: Link to the associated event
            confirmPayment:
              type: object
              properties:
                href:
                  type: string
                  description: Link to confirm payment (internal/webhook use)
            cancel:
              type: object
              properties:
                href:
                  type: string
                  description: Link to cancel the ticket
    TicketInput:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          default: 1
          description: Number of tickets to book
        ticketType:
          type: string
          description: Optional ticket type (e.g., VIP, General)
    PaymentConfirmation:
      type: object
      required:
        - paymentId
        - status
      properties:
        paymentId:
          type: string
        status:
          type: string
          enum: [successful, failed]
        transactionDetails:
          type: object
          description: Additional payment details from Payment Service
    Success:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: "Ticket created successfully"

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
paths:
  /events:
    get:
      summary: View all events
      description: Retrieves a list of all events, filterable by name and sortable by name or date. Available to everyone (no authentication required).
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Filter events by name (partial match)
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, date, -name, -date]
          description: Sort order (e.g., 'name' for ascending by name, '-date' for descending by date)
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new event
      description: Creates a new event. Requires admin privileges. Triggers notification to Notification Service if applicable.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}:
    get:
      summary: View specific event
      description: Retrieves details of a specific event, including HATEOAS links to related resources (e.g., ticket booking or specifics). Available to everyone.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an event
      description: Updates an existing event. Requires admin privileges (moved from authenticated user as it fits admin role better). Triggers updates to related services if needed.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an event
      description: Deletes an event. Requires admin privileges. May trigger cancellations and notifications via Notification Service.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Event deleted
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}/tickets:
    post:
      summary: Book a ticket
      description: Books a ticket for the event, saves it with pending status, sends details to Recon Service for payment processing. Returns ticket ID for frontend to redirect to payment page. Requires authenticated user. If successful, Payment Service will callback to confirm.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketInput'
      responses:
        '201':
          description: Ticket booked (pending payment)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketId:
                    type: string
                  eventId:
                    type: string
                  status:
                    type: string
                  _links:
                    type: object
                    properties:
                      payment:
                        type: object
                        properties:
                          href:
                            type: string
                            description: Suggested link to payment page (frontend handles redirect)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found or no tickets available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List tickets for an event (admin only)
      description: Retrieves all tickets for a specific event. Added for admin management.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /my/tickets:
    get:
      summary: View user tickets
      description: Retrieves tickets for the authenticated user, filtered by status (successful or pending) and upcoming events (event date > current date -1 day). Use query params for filtering.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [successful, pending]
          description: Filter by payment status
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
          description: Optional start date for event date filter (defaults to now)
        - name: toDate
          in: query
          schema:
            type: string
            format: date
          description: Optional end date for event date filter (defaults to far future)
      responses:
        '200':
          description: List of user tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{ticketId}:
    get:
      summary: View specific ticket
      description: Retrieves details of a specific ticket, including HATEOAS links. Requires authenticated user (owner) or admin.
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Cancel a ticket
      description: Cancels a pending or successful ticket. Requires authenticated user (owner). Triggers refund process via Payment Service if applicable.
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Ticket cancelled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks/payment-confirmation:
    post:
      summary: Payment confirmation webhook
      description: Endpoint for Payment Service to confirm payment status. Updates ticket and payment status in database and Recon Service. Internal use, secured by API key or mutual auth (not bearer).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticketId:
                  type: string
                eventId:
                  type: string
                paymentId:
                  type: string
                status:
                  type: string
                  enum: [successful, failed]
                details:
                  type: object
      responses:
        '200':
          description: Confirmation processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket or event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

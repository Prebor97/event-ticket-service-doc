openapi: 3.0.0
info:
  title: Ticket Service API
  description: API documentation for the Ticket Service, part of an event-driven architecture integrating with User Service, Notification Service, Payment Service, and Recon Service. This service handles event creation, ticket booking, and management. Authentication is required for protected endpoints (e.g., JWT bearer token). Admin privileges are enforced via roles in the token. HATEOAS principles are applied where relevant, providing links in responses for related resources.
  version: 1.0.0
servers:
  - url: https://api.ticket-service.com/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Assumes JWT with claims for user ID and roles (e.g., 'admin')
  schemas:
    ViewEventResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique event identifier
        name:
          type: string
          description: Event name
        date:
          type: string
          format: date-time
          description: Event date and time (ISO 8601)
        location:
          type: string
          description: Event location
        description:
          type: string
          description: Event details
        capacity:
          type: integer
          description: Total ticket capacity
        availableTickets:
          type: integer
          description: Remaining available tickets
        _links:
          type: object
          description: HATEOAS links
          properties:
            tickets:
              type: object
              properties:
                href:
                  type: string
                  description: Link to list tickets for this event by name (admin only)
            bookTicket:
              type: object
              properties:
                href:
                  type: string
                  description: Link to book a ticket for this event by id(user and event to send with ticket id to recon service)
    ViewEventsResponse:
      type: array
      items:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
          name:
            type: string
          _links:
            type: object
            properties:
              event:
                type: object
                properties:
                  href:
                    type: string
                    description: Link to a particular event                     
    EventInput:
      type: object
      required:
        - name
        - descriptionn
        - event_date
        - location
        - available_tickets
        - price
      properties:
        name:
          type: string
        description:
          type: string
        event_date:
          type: string
          format: date-time
        location:
          type: string
        available_tickets:
          type: integer
    TicketResponse:
      type: array
      items:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
          name:
            type: string
          ticketsBooked:
            type: integer
    UserListTicketResponse:
      type: array
      items:
        type: object
        required:
          - id
          - name
          - ticketsBooked
        properties:
          id:
            type: string
          name:
            type: string
          ticketsBooked:
            type: integer
          _links:
            type: object
            properties:
              self:
                type: object
                properties:
                  href:
                    type: string
                    example: /tickets/{id}
                    description: Link to this specific ticket 
    UserTicketResponse:
      type: object
      properties:
        id:
          type: string
        event:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            date:
              type: string
              format: date-time
            location:
              type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
        ticketsBooked:
          type: integer
        paymentDate:
          type: string
          format: date-time
    TicketInput:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          default: 1
          description: Number of tickets to book
    Success:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: "Ticket created successfully"
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
paths:
  /events:
    get:
      summary: View all events
      description: Retrieves a list of all events, filterable by name and sortable by name or date. Available to everyone (no authentication required).
      parameters:
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum: [successful, pending]
        description: Filter by payment status
      - name: fromDate
        in: query
        schema:
          type: string
          format: date
        description: Optional start date for the event date filter (defaults to now)
      - name: toDate
        in: query
        schema:
          type: string
          format: date
        description: Optional end date for event date filter (defaults to far future)
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ViewEventsResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new event
      description: Only admins should be allowed to create events. Just input the necessary values in the request body(dto) to create a new event. No Notification is sent and a mail is sent to all admins that an event has been created.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}:
    get:
      summary: View specific event
      description: Retrieves details of a specific event, including HATEOAS links to related resources like ticket booking and get all tickets for an event which is only accessible to admins. Available to everyone.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewEventResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an event
      description: Updates an existing event. Requires admin privileges.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an event
      description: Deletes an event. Requires admin privileges. Triggers notifications via Notification Service to send mails to all admins telling them of the deleted event.
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Event deleted
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}/tickets:
    post:
      summary: Book a ticket for an event
      description: Books a ticket for the event specified by creating a ticket object and saving respective values in that ticket object. Get the user id, email and user name from the jwt. Set payment status to pending before saving the created entity. Then send event object and ticket object to the reconciliation service who will then save that information in the payment table and the status will be saved as pending. Also send event and tickets to notification service to alert user of ticket booked. You can include link to download pdf where booking information wil be present. 
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string   
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketInput'
      responses:
        '201':
          description: Ticket booked (pending payment)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found or no tickets available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List tickets for an event (admin only)
      description: Retrieves all tickets for a specific event. Added for admin management.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [successful, pending]
          description: Filter by payment status
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
          description: Optional start date for event date filter (defaults to now)
        - name: toDate
          in: query
          schema:
            type: string
            format: date
          description: Optional end date for event date filter (defaults to far future)    
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketResponse'
        '401':
          description: Unauthorized (not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /my/tickets:
    get:
      summary: View user tickets
      description: Retrieves tickets for the authenticated user, filtered by status (successful or pending) and upcoming events (event date > current date -1 day). Use query params for filtering.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [successful, pending]
          description: Filter by payment status
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
          description: Optional start date for event date filter (defaults to now)
        - name: toDate
          in: query
          schema:
            type: string
            format: date
          description: Optional end date for event date filter (defaults to far future)
      responses:
        '200':
          description: List of user tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserListTicketResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/{ticketId}:
    get:
      summary: View specific ticket
      description: Retrieves details of a specific ticket, including HATEOAS links. Requires authenticated user (owner) or admin.
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTicketResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Cancel a ticket
      description: Cancels a pending or successful ticket. Requires authenticated user (owner). Triggers refund process via Payment Service.
      security:
        - bearerAuth: []
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Ticket cancelled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
